Finer Details
You might notice that the change email flow is interrupted if the user does not confirm the new email. In this case, the email appears to have been changed but Cognito marks it as not being verified. We will let you handle this case on your own but here are a couple of hints on how to do so.

You can get the current user’s Cognito attributes by calling Auth.userAttributes(currentUser). Looking for the email attribute and checking if it is not verified using attributes["email_verified"] !== "false".

In this case show a simple sign that allows users to resend the verification code. You can do this by calling Auth.verifyCurrentUserAttribute("email").

Next you can simply display the confirm code form from above and follow the same flow by calling Auth.verifyCurrentUserAttributeSubmit("email", this.state.code).

This can make your change email flow more robust and handle the case where a user forgets to verify their new email.

Next Steps
Now this seems really easy to implement but you might be wondering what happens if the request to import the new component takes too long, or fails. Or maybe you want to preload certain components. For example, a user is on your login page about to login and you want to preload the homepage.

It was mentioned above that you can add a loading spinner while the import is in progress. But we can take it a step further and address some of these edge cases. There is an excellent higher order component that does a lot of this well; it’s called react-loadable.

All you need to do to use it is install it.

$ npm install --save react-loadable
Use it instead of the asyncComponent that we had above.

const AsyncHome = Loadable({
  loader: () => import("./containers/Home"),
  loading: MyLoadingComponent
});
And AsyncHome is used exactly as before. Here the MyLoadingComponent would look something like this.

const MyLoadingComponent = ({isLoading, error}) => {
  // Handle the loading state
  if (isLoading) {
    return <div>Loading...</div>;
  }
  // Handle the error state
  else if (error) {
    return <div>Sorry, there was a problem loading the page.</div>;
  }
  else {
    return null;
  }
};

It’s a simple component that handles all the different edge cases gracefully.

To add preloading and to further customize this; make sure to check out the other options and features that react-loadable has. And have fun code splitting!


https://serverless-stack.com/chapters/environments-in-create-react-app.html

